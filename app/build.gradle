import dependencies.Dependencies
import dependencies.Modules

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-kapt'
    id "kotlin-allopen"
    id 'com.github.triplet.play' version '2.2.1'
    id 'com.google.firebase.appdistribution'
}

android {

    defaultConfig {
        applicationId "org.js.denisvieira.featureplayground"

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dexOptions {
        javaMaxHeapSize "4g" //specify the heap size for the dex process
    }

    flavorDimensions "product"

    productFlavors {
        whitelabel {
            dimension "product"
            applicationIdSuffix ".whitelabel"
            versionNameSuffix " - whitelabel"
        }

        customproduct {
            dimension "product"
            applicationIdSuffix ".customproduct"
            versionNameSuffix " - customproduct"
        }

    }

    signingConfigs {
        // Custom debug store to be sure that all tools e.g. Haven have the same
        // hash of the key to work properly.
        customDebug {
            storeFile file("$rootDir/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {

        debug {
            signingConfig signingConfigs.customDebug
            testCoverageEnabled true

            applicationIdSuffix ".dev"

        }

        wiremock {
            signingConfig signingConfigs.customDebug
            testCoverageEnabled true

            applicationIdSuffix ".wiremock"

            manifestPlaceholders = [
                    firebaseAnalyticsDeactivated: "true",
            ]

        }

        release {
            signingConfig signingConfigs.customDebug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    // Custom resource folders for each screen module
    sourceSets {

        debug {
            res.srcDirs = ['src/androidTest/res']
        }

        String sharedTest = 'src/sharedTest/kotlin'

        test.java.srcDirs += sharedTest
        androidTest.java.srcDirs += sharedTest

    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}

play {
    serviceAccountCredentials = file("upload_key.json")

    track = "internal"
    userFraction = 1.0
    releaseStatus = "inProgress"

    defaultToAppBundles = true
}


dependencies {
    //Module
    implementation project(Modules.DI)
    implementation project(Modules.Commons.COMMONS_CORE)
    implementation project(Modules.ROUTER)

    // Support
    implementation Dependencies.Android.APP_COMPAT
    implementation Dependencies.Android.DESIGN
    implementation Dependencies.Android.CONSTRAINT_LAYOUT
    implementation Dependencies.Firebase.ANALYTICS

    // Android Architecture Components
    implementation Dependencies.Lifecycle.RUNTIME
    implementation Dependencies.Lifecycle.EXTENSIONS
    kapt Dependencies.Lifecycle.COMPILER

    // Stability
    implementation(Dependencies.Firebase.CRASHLYTICS) {
        transitive = true
    }
}
